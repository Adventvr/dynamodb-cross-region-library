#!/usr/bin/env node
/*
 * Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 * http://aws.amazon.com/asl/
 * 
 * or in the "LICENSE.txt" file accompanying this file.
 * 
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

var path = require('path');
var fs   = require('fs');
var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var async = require('async');

var util = require(lib + '/util');
var logger = util.getLogger();

var DynamoDBInputStream = require(lib + '/dynamodb_input_stream');
var RedisOutputStream = require(lib + '/redis_output_stream');
var OutputStreamMonitor = require(lib + '/output_stream_monitor');
var cliArgs = require('command-line-args');

/* define the command-line options */
var cli = cliArgs([
    { name: "debug", type: Boolean, alias: "d", description: "Set log level to debug" },
    { name: "help", type: Boolean, description: "Print usage instructions" },
    { name: "sourceEndpoint", type: String, description: "Endpoint of source table" },
    { name: "totalSegments", type: Number, description: "Number of total segments for parallel scan" },    
    { name: "args", type: Array, defaultOption: true, description: "Source table and destination Redis endpoint in the following format: [region:]<source table name> redis://<hostname>:<port>[/database id]" }    
]);

var options = cli.parse();
var usage = cli.getUsage({
    header: "DynamoDB Export utility for Redis"
});

if (options.help){
    console.log(usage);
    process.exit(0);
}

if (options.debug){
    process.env.LOG_LEVEL = 'debug';
}

var exportToRedis = function(src, dst, segments, totalSegments, callback){
    var monitor = new OutputStreamMonitor();
    monitor.start();
    async.map(
        segments, 
        function(segment, done){
            var dynamodbInputStream = new DynamoDBInputStream(src, segment, totalSegments);
            var redisOutputStream = new RedisOutputStream(dst.host, dst.port, dst.database, src.tableDescription);

            monitor.add(redisOutputStream);

            redisOutputStream.on('finish', function(){
                callback(null, redisOutputStream.numWritten);
            });
            redisOutputStream.on('error', function(error){
                callback(error);
            });
            dynamodbInputStream.pipe(redisOutputStream);
        }, 
        function(err, results){
            if (!err){
                monitor.stop();
                var nTotalItemsCopied = 0;
                for (var i = 0; i < results.length; i++){
                    nTotalItemsCopied += results[i];
                }
                callback(null, nTotalItemsCopied);              
            } else {
                callback(err);
            }
        }
        );
};

var args = options.args;

if (args && args.length == 2){
    var totalSegments = 1;

    var src = util.parseDynamoDBTableName(args[0]);
    if (options.sourceEndpoint){
        src.endpoint = options.sourceEndpoint;
    }
    var dst = util.parseRedisUrl(args[1]);

    if (options.totalSegments){
        totalSegments = options.totalSegments;
    }
    var segments = util.getSegments(0, 1, totalSegments);

    logger.info('Exporting table %s:%s to redis://%s:%d/%s (in %d segments)', 
        src.region, src.tableName, 
        dst.host, dst.port, dst.database, totalSegments);

    var start = new Date().getTime();
    util.describeTable(src, function(err, data){
        if (!err){
            src.tableDescription = data.Table;
            exportToRedis(src, dst, segments, totalSegments, function(err, nItemsCopied){
                if (!err){
                    logger.info('%d items exported in %d ms', nItemsCopied, new Date().getTime() - start);
                    process.exit(0);
                } else {
                    logger.error(err);
                    process.exit(1);
                }
            });         
        } else {
            logger.error(err);
            process.exit(1);
        }
    });
} else {
    console.error(usage);
}

