#!/usr/bin/env node
/*
 * Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 * http://aws.amazon.com/asl/
 * 
 * or in the "LICENSE.txt" file accompanying this file.
 * 
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

var path = require('path');
var fs   = require('fs');
var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var bin  = path.join(path.dirname(fs.realpathSync(__filename)), '../bin');
var os = require('os');
var logger = require(lib + '/util').logger;
var fork = require('child_process').fork;
var cliArgs = require("command-line-args");

/* define the command-line options */
var cli = cliArgs([
    { name: "debug", type: Boolean, alias: "d", description: "Set log level to debug" },
    { name: "help", type: Boolean, description: "Print usage instructions" },
    { name: "sourceEndpoint", type: String, description: "Endpoint of source table" },
    { name: "totalSegments", type: Number, description: "Number of total segments for parallel scan" },    
    { name: "args", type: Array, defaultOption: true, description: "Source table and S3 object prefix in the following format: [region:]<source table name> s3://<bucketName>/[objectPrefix]" }    
]);

var options = cli.parse();
var usage = cli.getUsage({
    header: "DynamoDB Table Export utility"
});

if (options.help){
    console.log(usage);
    process.exit(0);
}

if (options.debug){
    process.env.LOG_LEVEL = 'debug';
}

var args = options.args;

if (args && args.length >= 2){
    var nForks = os.cpus().length;
    var totalSegments = nForks;

    if (options.totalSegments){
        totalSegments = options.totalSegments
        logger.info('Total number of segment is overwritten to %d', totalSegments);
    } else if (args.length == 3){ // Backward compatibility
        totalSegments = args[2];
    }
    if (nForks > totalSegments){
        nForks = totalSegments;
    }

    var childProcesses = {};
    var errors = 0;
    var childProcessArgs = [];
    if (options.sourceEndpoint)
        childProcessArgs = childProcessArgs.concat(['--sourceEndpoint', options.sourceEndpoint]);
    for (var i = 0; i < nForks; i++) {

        logger.debug('Forking process %d/%d to scan total %d segments ', i + 1, nForks, totalSegments);
        var proc = fork(bin + '/__export_to_s3', 
            childProcessArgs.concat([args[0], args[1], totalSegments, i, nForks]));

        childProcesses[proc.pid] = proc;

        var killChildProcesses = function(code){
            for (var pid in childProcesses){
                logger.debug('Killing process %d', pid);
                childProcesses[pid].kill(code);
            }
        };

        proc.on('exit', function(code){
            if (childProcesses[this.pid]){
                delete childProcesses[this.pid];
                if (code === 0){
                    logger.debug('Process %d finished successfully.', this.pid);
                } else {
                    errors++;
                    logger.error('Process %d exit with error', this.pid);
                    killChildProcesses(code);
                }
            }
            if (Object.keys(childProcesses).length === 0){
                logger.debug('No process remained.');
                if (errors > 0){
                    logger.error('Exit with code %d', errors);
                }
                process.exit(errors);
            }
        });
    }
    process.on('SIGINT', killChildProcesses);
    process.on('SIGTERM', killChildProcesses);    
} else {
    console.error(usage);
}


