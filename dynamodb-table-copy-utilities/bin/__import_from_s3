#!/usr/bin/env node
/*
 * Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 * http://aws.amazon.com/asl/
 * 
 * or in the "LICENSE.txt" file accompanying this file.
 * 
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

var path = require('path');
var fs   = require('fs');
var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var async = require('async');

var S3InputStream = require(lib + '/s3_input_stream');
var DynamoDBOutputStream = require(lib + '/dynamodb_output_stream');
var util = require(lib + '/util');
var logger = util.logger;
var OutputStreamMonitor = require(lib + '/output_stream_monitor');
var cliArgs = require("command-line-args");

/* define the command-line options */
var cli = cliArgs([
    { name: "destinationEndpoint", type: String, description: "Endpoint of destination table" },
    { name: "args", type: Array, defaultOption: true, description: "Source S3 object prefix and destination table in the following format: s3://<bucket name>/[object prefix] [region:]<destination table name>" }    
]);

var options = cli.parse();

var importFromS3 = function(src, dst, keys, callback){
    var monitor = new OutputStreamMonitor();
    monitor.start();
    async.map(
        keys,
        function(key, keyDone){
            logger.debug(key);
            util.getContentMetadata(src.bucketName, key, function(err, metadata){
                if (!err){
                    var s3InputStream = new S3InputStream(src.bucketName, key, metadata);
                    var dynamodbOutputStream = new DynamoDBOutputStream(dst);
                    monitor.add(dynamodbOutputStream);

                    dynamodbOutputStream.on('finish', function(){
                        keyDone(null, dynamodbOutputStream.numWritten);
                    });
                    dynamodbOutputStream.on('error', function(err){
                        keyDone('Failed to import data under ' + key + ' to DynamoDB: ' + err);
                    });
                    s3InputStream.pipe(dynamodbOutputStream);
                } else {
                    keyDone(err);
                }
            });         
        },
        function(err, results){
            if (!err){
                monitor.stop();
                var sum = 0;
                for (var i in results){
                    sum += results[i];
                }
                callback(null, sum);
            } else {
                callback(err);
            }
        }
        );

};


var args = options.args;

if (args && args.length >= 2){
    var src = util.parseS3Url(args[0]);
    var dst = util.parseDynamoDBTableName(args[1]);
    var keys = args.slice(2);

    logger.debug('Child process to import data started');
    logger.debug(keys);
    var startTime = new Date().getTime();
    importFromS3(src, dst, keys, function(err, nItemsCopied){
        if (!err){
            logger.info('%d items imported in %d ms', nItemsCopied, new Date().getTime() - startTime);
            process.exit(0);
        } else {
            logger.error(err);
            process.exit(1);            
        }
    }); 
} else {
    console.error(cli.getUsage());
}

