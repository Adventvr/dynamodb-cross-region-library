#!/usr/bin/env node
/*
 * Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 * http://aws.amazon.com/asl/
 * 
 * or in the "LICENSE.txt" file accompanying this file.
 * 
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

var path = require('path');
var fs   = require('fs');
var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var async = require('async');

var util = require(lib + '/util');
var logger = util.getLogger();
var cliArgs = require("command-line-args");

/* define the command-line options */
var cli = cliArgs([
    { name: "debug", type: Boolean, alias: "d", description: "Set log level to debug" },
    { name: "help", type: Boolean, description: "Print usage instructions" },
    { name: "endpoint", type: String, description: "Endpoint of table" },
    { name: "totalSegments", type: Number, description: "Number of total segments for parallel scan" },    
    { name: "args", type: Array, defaultOption: true, description: "Table in the following format: [region:]<table name>" }    
]);

var options = cli.parse();
var usage = cli.getUsage({
    header: "DynamoDB Item count utility"
});

if (options.help){
    console.log(usage);
    process.exit(0);
}

if (options.debug){
    process.env.LOG_LEVEL = 'debug';
}

DEFAULT_BACKOFF_TIME = 64;
MAX_BACKOFF_TIME = 4096;

var countItems = function(src, segments, totalSegments, callback){
    var nItems = 0;
    var dynamodb = util.getDynamoDBClient(src.region, src.endpoint);
    var reportThreashold = 1000 * 1000;
    var i = 1;
    async.map(
        segments, 
        function(segment, segmentDone){
            var lastEvaluatedKey = null;
            var params = {
                TableName: src.tableName,
                Segment: segment,
                TotalSegments: totalSegments,
                Select: 'COUNT',
                Limit: 1000
            };
            var startTime = new Date().getTime();
            var backoff = new util.ExponentialBackoff(DEFAULT_BACKOFF_TIME, MAX_BACKOFF_TIME);
            async.doUntil(
                function(done){
                    if (lastEvaluatedKey){
                        params.ExclusiveStartKey = lastEvaluatedKey;
                    }
                    dynamodb.scan(params, function(err, data){
                        if (!err){
                            nItems += data.Count;
                            if (nItems >= i * reportThreashold){
                                var duration = new Date().getTime() - startTime;
                                logger.info('Counted %d items (Rate = %d items/s)', 
                                    nItems, reportThreashold / (duration / 1000));
                                startTime = new Date().getTime();
                                i++;
                            }
                            lastEvaluatedKey = data.LastEvaluatedKey;
                            backoff.skip(done);
                        } else {
                            if (err.code === 'ProvisionedThroughputExceededException'){
                                logger.warn('Provisioned Throughput Exceeded.');
                                backoff.execute(done);
                            } else {
                                done(err);
                            }
                        }
                    });
                },
                function(){
                    return !lastEvaluatedKey;
                },
                function(err){
                    if (!err){
                        logger.debug('Finished scanning segment %d', segment);
                        segmentDone(null);
                    } else {
                        segmentDone(err);
                    }
                }
            );
        }, 
        function(err){
            if (!err){
                callback(null, nItems);              
            } else {
                callback(err);
            }
        }
        );
};

var args = options.args;

if (args && args.length == 1){
    var totalSegments = 4;
    var src = util.parseDynamoDBTableName(args[0]);
    if (options.endpoint){
        src.endpoint = options.endpoint;
    }

    if (options.totalSegments){
        totalSegments = options.totalSegments;
    }   

    var segments = util.getSegments(0, 1, totalSegments);

    logger.info('Counting items in table %s:%s (%d segments in parallel)',
        src.region, src.tableName, totalSegments);

    var start = new Date().getTime();
    countItems(src, segments, totalSegments, function(err, nItemsCopied){
        if (!err){
            logger.info('Total %d items scanned in %d ms', nItemsCopied, new Date().getTime() - start);
            process.exit(0);
        } else {
            logger.error(err);
            process.exit(1);
        }
    });         
} else {
    console.error(usage);
}

