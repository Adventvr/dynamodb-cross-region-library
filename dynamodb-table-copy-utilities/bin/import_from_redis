#!/usr/bin/env node
/*
 * Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 * http://aws.amazon.com/asl/
 * 
 * or in the "LICENSE.txt" file accompanying this file.
 * 
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

var path = require('path');
var fs   = require('fs');
var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var async = require('async');

var RedisInputStream = require(lib + '/redis_input_stream');
var DynamoDBOutputStream = require(lib + '/dynamodb_output_stream');
var util = require(lib + '/util');
var logger = util.logger;
var OutputStreamMonitor = require(lib + '/output_stream_monitor');
var cliArgs = require("command-line-args");

/* define the command-line options */
var cli = cliArgs([
    { name: "debug", type: Boolean, alias: "d", description: "Set log level to debug" },
    { name: "help", type: Boolean, description: "Print usage instructions" },
    { name: "destinationEndpoint", type: String, description: "Endpoint of destination table" },
    { name: "args", type: Array, defaultOption: true, description: "Source Redis endpoint and destination table in the following format: redis://<hostname>:<port>[/database id] [region:]<destination table name>" }    
]);

var options = cli.parse();
var usage = cli.getUsage({
    header: "DynamoDB Table Copy utility"
});

if (options.help){
    console.log(usage);
    process.exit(0);
}

if (options.debug){
    process.env.LOG_LEVEL = 'debug';
}


var importFromRedis = function(src, dst, callback){
    var monitor = new OutputStreamMonitor();
    var redisInputStream = new RedisInputStream(src.host, src.port, src.database, dst.tableDescription);
    var dynamodbOutputStream = new DynamoDBOutputStream(dst);
    monitor.add(dynamodbOutputStream);

    dynamodbOutputStream.on('finish', function(){
        monitor.stop();
        callback(null, dynamodbOutputStream.numWritten);
    });
    dynamodbOutputStream.on('error', function(error){
        callback(error);
    });
    redisInputStream.pipe(dynamodbOutputStream);
};


var args = options.args;

if (args && args.length == 2){
    var src = util.parseRedisUrl(args[0]);
    var dst = util.parseDynamoDBTableName(args[1]);
    if (options.destinationEndpoint){
        dst.endpoint = options.destinationEndpoint;
    }

    var startTime = new Date().getTime();

    util.describeTable(dst, function(err, data){
        if (!err){
            dst.tableDescription = data.Table;

            importFromRedis(src, dst, function(err, nItemsCopied){
                if (!err){
                    logger.info('%d items imported in %d ms', nItemsCopied, new Date().getTime() - startTime);
                    process.exit(0);
                } else {
                    logger.error(err);
                    process.exit(1);
                }
            }); 
        } else {
            logger.error(error);
            process.exit(1);
        }
    });
} else {
    console.error(usage);
}

